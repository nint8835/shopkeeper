/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query';
import { ShopkeeperContext, useShopkeeperContext } from './shopkeeperContext';
import type * as Fetcher from './shopkeeperFetcher';
import { shopkeeperFetch } from './shopkeeperFetcher';
import type * as Schemas from './shopkeeperSchemas';

export type GetListingsError = Fetcher.ErrorWrapper<undefined>;

export type GetListingsResponse = Schemas.ListingSchema[];

export type GetListingsVariables = ShopkeeperContext['fetcherOptions'];

export const fetchGetListings = (variables: GetListingsVariables, signal?: AbortSignal) =>
    shopkeeperFetch<GetListingsResponse, GetListingsError, undefined, {}, {}, {}>({
        url: '/api/listings/',
        method: 'get',
        ...variables,
        signal,
    });

export const useGetListings = <TData = GetListingsResponse>(
    variables: GetListingsVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<GetListingsResponse, GetListingsError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { fetcherOptions, queryOptions, queryKeyFn } = useShopkeeperContext(options);
    return reactQuery.useQuery<GetListingsResponse, GetListingsError, TData>({
        queryKey: queryKeyFn({
            path: '/api/listings/',
            operationId: 'getListings',
            variables,
        }),
        queryFn: ({ signal }) => fetchGetListings({ ...fetcherOptions, ...variables }, signal),
        ...options,
        ...queryOptions,
    });
};

export type GetCurrentUserError = Fetcher.ErrorWrapper<undefined>;

export type GetCurrentUserVariables = ShopkeeperContext['fetcherOptions'];

export const fetchGetCurrentUser = (variables: GetCurrentUserVariables, signal?: AbortSignal) =>
    shopkeeperFetch<Schemas.DiscordUser | null, GetCurrentUserError, undefined, {}, {}, {}>({
        url: '/auth/me',
        method: 'get',
        ...variables,
        signal,
    });

export const useGetCurrentUser = <TData = Schemas.DiscordUser | null>(
    variables: GetCurrentUserVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<Schemas.DiscordUser | null, GetCurrentUserError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { fetcherOptions, queryOptions, queryKeyFn } = useShopkeeperContext(options);
    return reactQuery.useQuery<Schemas.DiscordUser | null, GetCurrentUserError, TData>({
        queryKey: queryKeyFn({
            path: '/auth/me',
            operationId: 'getCurrentUser',
            variables,
        }),
        queryFn: ({ signal }) => fetchGetCurrentUser({ ...fetcherOptions, ...variables }, signal),
        ...options,
        ...queryOptions,
    });
};

export type QueryOperation =
    | {
          path: '/api/listings/';
          operationId: 'getListings';
          variables: GetListingsVariables;
      }
    | {
          path: '/auth/me';
          operationId: 'getCurrentUser';
          variables: GetCurrentUserVariables;
      };
