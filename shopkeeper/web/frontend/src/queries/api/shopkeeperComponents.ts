/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query';
import { ShopkeeperContext, useShopkeeperContext } from './shopkeeperContext';
import type * as Fetcher from './shopkeeperFetcher';
import { shopkeeperFetch } from './shopkeeperFetcher';
import type * as Schemas from './shopkeeperSchemas';

export type GetListingsApiListingsGetError = Fetcher.ErrorWrapper<undefined>;

export type GetListingsApiListingsGetResponse = Schemas.ListingSchema[];

export type GetListingsApiListingsGetVariables = ShopkeeperContext['fetcherOptions'];

export const fetchGetListingsApiListingsGet = (variables: GetListingsApiListingsGetVariables, signal?: AbortSignal) =>
    shopkeeperFetch<GetListingsApiListingsGetResponse, GetListingsApiListingsGetError, undefined, {}, {}, {}>({
        url: '/api/listings/',
        method: 'get',
        ...variables,
        signal,
    });

export const useGetListingsApiListingsGet = <TData = GetListingsApiListingsGetResponse>(
    variables: GetListingsApiListingsGetVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<GetListingsApiListingsGetResponse, GetListingsApiListingsGetError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { fetcherOptions, queryOptions, queryKeyFn } = useShopkeeperContext(options);
    return reactQuery.useQuery<GetListingsApiListingsGetResponse, GetListingsApiListingsGetError, TData>({
        queryKey: queryKeyFn({
            path: '/api/listings/',
            operationId: 'getListingsApiListingsGet',
            variables,
        }),
        queryFn: ({ signal }) => fetchGetListingsApiListingsGet({ ...fetcherOptions, ...variables }, signal),
        ...options,
        ...queryOptions,
    });
};

export type QueryOperation = {
    path: '/api/listings/';
    operationId: 'getListingsApiListingsGet';
    variables: GetListingsApiListingsGetVariables;
};
