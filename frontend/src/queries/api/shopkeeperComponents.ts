/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query';
import { useShopkeeperContext, ShopkeeperContext, queryKeyFn } from './shopkeeperContext';
import { deepMerge } from './shopkeeperUtils';
import type * as Fetcher from './shopkeeperFetcher';
import { shopkeeperFetch } from './shopkeeperFetcher';
import type * as Schemas from './shopkeeperSchemas';

type QueryFnOptions = {
    signal?: AbortController['signal'];
};

export type GetListingsError = Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
}>;

export type GetListingsResponse = Schemas.FullListingSchema[];

export type GetListingsVariables = {
    body?: Schemas.SearchListingsSchema;
} & ShopkeeperContext['fetcherOptions'];

/**
 * Retrieve a list of listings.
 */
export const fetchGetListings = (variables: GetListingsVariables, signal?: AbortSignal) =>
    shopkeeperFetch<GetListingsResponse, GetListingsError, Schemas.SearchListingsSchema, {}, {}, {}>({
        url: '/api/listings/search',
        method: 'post',
        ...variables,
        signal,
    });

/**
 * Retrieve a list of listings.
 */
export function getListingsQuery(variables: GetListingsVariables): {
    queryKey: reactQuery.QueryKey;
    queryFn: (options: QueryFnOptions) => Promise<GetListingsResponse>;
};

export function getListingsQuery(variables: GetListingsVariables | reactQuery.SkipToken): {
    queryKey: reactQuery.QueryKey;
    queryFn: ((options: QueryFnOptions) => Promise<GetListingsResponse>) | reactQuery.SkipToken;
};

export function getListingsQuery(variables: GetListingsVariables | reactQuery.SkipToken) {
    return {
        queryKey: queryKeyFn({
            path: '/api/listings/search',
            operationId: 'getListings',
            variables,
        }),
        queryFn:
            variables === reactQuery.skipToken
                ? reactQuery.skipToken
                : ({ signal }: QueryFnOptions) => fetchGetListings(variables, signal),
    };
}

/**
 * Retrieve a list of listings.
 */
export const useSuspenseGetListings = <TData = GetListingsResponse>(
    variables: GetListingsVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<GetListingsResponse, GetListingsError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { queryOptions, fetcherOptions } = useShopkeeperContext(options);
    return reactQuery.useSuspenseQuery<GetListingsResponse, GetListingsError, TData>({
        ...getListingsQuery(deepMerge(fetcherOptions, variables)),
        ...options,
        ...queryOptions,
    });
};

/**
 * Retrieve a list of listings.
 */
export const useGetListings = <TData = GetListingsResponse>(
    variables: GetListingsVariables | reactQuery.SkipToken,
    options?: Omit<
        reactQuery.UseQueryOptions<GetListingsResponse, GetListingsError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { queryOptions, fetcherOptions } = useShopkeeperContext(options);
    return reactQuery.useQuery<GetListingsResponse, GetListingsError, TData>({
        ...getListingsQuery(variables === reactQuery.skipToken ? variables : deepMerge(fetcherOptions, variables)),
        ...options,
        ...queryOptions,
    });
};

export type CreateListingError = Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
}>;

export type CreateListingVariables = {
    body: Schemas.CreateListingSchema;
} & ShopkeeperContext['fetcherOptions'];

/**
 * Create a new listing.
 */
export const fetchCreateListing = (variables: CreateListingVariables, signal?: AbortSignal) =>
    shopkeeperFetch<Schemas.ListingSchema, CreateListingError, Schemas.CreateListingSchema, {}, {}, {}>({
        url: '/api/listings/',
        method: 'post',
        ...variables,
        signal,
    });

/**
 * Create a new listing.
 */
export const useCreateListing = (
    options?: Omit<
        reactQuery.UseMutationOptions<Schemas.ListingSchema, CreateListingError, CreateListingVariables>,
        'mutationFn'
    >,
) => {
    const { fetcherOptions } = useShopkeeperContext();
    return reactQuery.useMutation<Schemas.ListingSchema, CreateListingError, CreateListingVariables>({
        mutationFn: (variables: CreateListingVariables) => fetchCreateListing(deepMerge(fetcherOptions, variables)),
        ...options,
    });
};

export type EditListingPathParams = {
    listingId: number;
};

export type EditListingError = Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
}>;

export type EditListingVariables = {
    body: Schemas.EditListingSchema;
    pathParams: EditListingPathParams;
} & ShopkeeperContext['fetcherOptions'];

/**
 * Edit an existing listing.
 */
export const fetchEditListing = (variables: EditListingVariables, signal?: AbortSignal) =>
    shopkeeperFetch<Schemas.ListingSchema, EditListingError, Schemas.EditListingSchema, {}, {}, EditListingPathParams>({
        url: '/api/listings/{listingId}',
        method: 'patch',
        ...variables,
        signal,
    });

/**
 * Edit an existing listing.
 */
export const useEditListing = (
    options?: Omit<
        reactQuery.UseMutationOptions<Schemas.ListingSchema, EditListingError, EditListingVariables>,
        'mutationFn'
    >,
) => {
    const { fetcherOptions } = useShopkeeperContext();
    return reactQuery.useMutation<Schemas.ListingSchema, EditListingError, EditListingVariables>({
        mutationFn: (variables: EditListingVariables) => fetchEditListing(deepMerge(fetcherOptions, variables)),
        ...options,
    });
};

export type HideListingPathParams = {
    listingId: number;
};

export type HideListingError = Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
}>;

export type HideListingVariables = {
    pathParams: HideListingPathParams;
} & ShopkeeperContext['fetcherOptions'];

/**
 * Hide a listing. This route requires you to be the owner of the bot.
 */
export const fetchHideListing = (variables: HideListingVariables, signal?: AbortSignal) =>
    shopkeeperFetch<void, HideListingError, undefined, {}, {}, HideListingPathParams>({
        url: '/api/listings/{listingId}/hide',
        method: 'post',
        ...variables,
        signal,
    });

/**
 * Hide a listing. This route requires you to be the owner of the bot.
 */
export const useHideListing = (
    options?: Omit<reactQuery.UseMutationOptions<void, HideListingError, HideListingVariables>, 'mutationFn'>,
) => {
    const { fetcherOptions } = useShopkeeperContext();
    return reactQuery.useMutation<void, HideListingError, HideListingVariables>({
        mutationFn: (variables: HideListingVariables) => fetchHideListing(deepMerge(fetcherOptions, variables)),
        ...options,
    });
};

export type GetUserIssueCountError = Fetcher.ErrorWrapper<undefined>;

export type GetUserIssueCountVariables = ShopkeeperContext['fetcherOptions'];

/**
 * Retrieve a count of the number of listings owned by the user with issues needing resolution.
 */
export const fetchGetUserIssueCount = (variables: GetUserIssueCountVariables, signal?: AbortSignal) =>
    shopkeeperFetch<number, GetUserIssueCountError, undefined, {}, {}, {}>({
        url: '/api/listings/issue-count',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Retrieve a count of the number of listings owned by the user with issues needing resolution.
 */
export function getUserIssueCountQuery(variables: GetUserIssueCountVariables): {
    queryKey: reactQuery.QueryKey;
    queryFn: (options: QueryFnOptions) => Promise<number>;
};

export function getUserIssueCountQuery(variables: GetUserIssueCountVariables | reactQuery.SkipToken): {
    queryKey: reactQuery.QueryKey;
    queryFn: ((options: QueryFnOptions) => Promise<number>) | reactQuery.SkipToken;
};

export function getUserIssueCountQuery(variables: GetUserIssueCountVariables | reactQuery.SkipToken) {
    return {
        queryKey: queryKeyFn({
            path: '/api/listings/issue-count',
            operationId: 'getUserIssueCount',
            variables,
        }),
        queryFn:
            variables === reactQuery.skipToken
                ? reactQuery.skipToken
                : ({ signal }: QueryFnOptions) => fetchGetUserIssueCount(variables, signal),
    };
}

/**
 * Retrieve a count of the number of listings owned by the user with issues needing resolution.
 */
export const useSuspenseGetUserIssueCount = <TData = number>(
    variables: GetUserIssueCountVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<number, GetUserIssueCountError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { queryOptions, fetcherOptions } = useShopkeeperContext(options);
    return reactQuery.useSuspenseQuery<number, GetUserIssueCountError, TData>({
        ...getUserIssueCountQuery(deepMerge(fetcherOptions, variables)),
        ...options,
        ...queryOptions,
    });
};

/**
 * Retrieve a count of the number of listings owned by the user with issues needing resolution.
 */
export const useGetUserIssueCount = <TData = number>(
    variables: GetUserIssueCountVariables | reactQuery.SkipToken,
    options?: Omit<
        reactQuery.UseQueryOptions<number, GetUserIssueCountError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { queryOptions, fetcherOptions } = useShopkeeperContext(options);
    return reactQuery.useQuery<number, GetUserIssueCountError, TData>({
        ...getUserIssueCountQuery(
            variables === reactQuery.skipToken ? variables : deepMerge(fetcherOptions, variables),
        ),
        ...options,
        ...queryOptions,
    });
};

export type GetCurrentUserError = Fetcher.ErrorWrapper<undefined>;

export type GetCurrentUserVariables = ShopkeeperContext['fetcherOptions'];

/**
 * Retrieve the details of the current user.
 */
export const fetchGetCurrentUser = (variables: GetCurrentUserVariables, signal?: AbortSignal) =>
    shopkeeperFetch<Schemas.DiscordUser | null, GetCurrentUserError, undefined, {}, {}, {}>({
        url: '/auth/me',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Retrieve the details of the current user.
 */
export function getCurrentUserQuery(variables: GetCurrentUserVariables): {
    queryKey: reactQuery.QueryKey;
    queryFn: (options: QueryFnOptions) => Promise<Schemas.DiscordUser | null>;
};

export function getCurrentUserQuery(variables: GetCurrentUserVariables | reactQuery.SkipToken): {
    queryKey: reactQuery.QueryKey;
    queryFn: ((options: QueryFnOptions) => Promise<Schemas.DiscordUser | null>) | reactQuery.SkipToken;
};

export function getCurrentUserQuery(variables: GetCurrentUserVariables | reactQuery.SkipToken) {
    return {
        queryKey: queryKeyFn({
            path: '/auth/me',
            operationId: 'getCurrentUser',
            variables,
        }),
        queryFn:
            variables === reactQuery.skipToken
                ? reactQuery.skipToken
                : ({ signal }: QueryFnOptions) => fetchGetCurrentUser(variables, signal),
    };
}

/**
 * Retrieve the details of the current user.
 */
export const useSuspenseGetCurrentUser = <TData = Schemas.DiscordUser | null>(
    variables: GetCurrentUserVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<Schemas.DiscordUser | null, GetCurrentUserError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { queryOptions, fetcherOptions } = useShopkeeperContext(options);
    return reactQuery.useSuspenseQuery<Schemas.DiscordUser | null, GetCurrentUserError, TData>({
        ...getCurrentUserQuery(deepMerge(fetcherOptions, variables)),
        ...options,
        ...queryOptions,
    });
};

/**
 * Retrieve the details of the current user.
 */
export const useGetCurrentUser = <TData = Schemas.DiscordUser | null>(
    variables: GetCurrentUserVariables | reactQuery.SkipToken,
    options?: Omit<
        reactQuery.UseQueryOptions<Schemas.DiscordUser | null, GetCurrentUserError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { queryOptions, fetcherOptions } = useShopkeeperContext(options);
    return reactQuery.useQuery<Schemas.DiscordUser | null, GetCurrentUserError, TData>({
        ...getCurrentUserQuery(variables === reactQuery.skipToken ? variables : deepMerge(fetcherOptions, variables)),
        ...options,
        ...queryOptions,
    });
};

export type HideImagePathParams = {
    imageId: number;
};

export type HideImageError = Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
}>;

export type HideImageVariables = {
    pathParams: HideImagePathParams;
} & ShopkeeperContext['fetcherOptions'];

/**
 * Hide a listing image. This route requires you to be the owner of the bot.
 */
export const fetchHideImage = (variables: HideImageVariables, signal?: AbortSignal) =>
    shopkeeperFetch<void, HideImageError, undefined, {}, {}, HideImagePathParams>({
        url: '/images/{imageId}/hide',
        method: 'post',
        ...variables,
        signal,
    });

/**
 * Hide a listing image. This route requires you to be the owner of the bot.
 */
export const useHideImage = (
    options?: Omit<reactQuery.UseMutationOptions<void, HideImageError, HideImageVariables>, 'mutationFn'>,
) => {
    const { fetcherOptions } = useShopkeeperContext();
    return reactQuery.useMutation<void, HideImageError, HideImageVariables>({
        mutationFn: (variables: HideImageVariables) => fetchHideImage(deepMerge(fetcherOptions, variables)),
        ...options,
    });
};

export type QueryOperation =
    | {
          path: '/api/listings/search';
          operationId: 'getListings';
          variables: GetListingsVariables | reactQuery.SkipToken;
      }
    | {
          path: '/api/listings/issue-count';
          operationId: 'getUserIssueCount';
          variables: GetUserIssueCountVariables | reactQuery.SkipToken;
      }
    | {
          path: '/auth/me';
          operationId: 'getCurrentUser';
          variables: GetCurrentUserVariables | reactQuery.SkipToken;
      };
