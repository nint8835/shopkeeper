/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from '@tanstack/react-query';
import { ShopkeeperContext, useShopkeeperContext } from './shopkeeperContext';
import type * as Fetcher from './shopkeeperFetcher';
import { shopkeeperFetch } from './shopkeeperFetcher';
import type * as Schemas from './shopkeeperSchemas';

export type GetListingsError = Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
}>;

export type GetListingsResponse = Schemas.FullListingSchema[];

export type GetListingsVariables = {
    body?: Schemas.SearchListingsSchema;
} & ShopkeeperContext['fetcherOptions'];

/**
 * Retrieve a list of listings.
 */
export const fetchGetListings = (variables: GetListingsVariables, signal?: AbortSignal) =>
    shopkeeperFetch<GetListingsResponse, GetListingsError, Schemas.SearchListingsSchema, {}, {}, {}>({
        url: '/api/listings/search',
        method: 'post',
        ...variables,
        signal,
    });

/**
 * Retrieve a list of listings.
 */
export const useGetListings = <TData = GetListingsResponse>(
    variables: GetListingsVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<GetListingsResponse, GetListingsError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { fetcherOptions, queryOptions, queryKeyFn } = useShopkeeperContext(options);
    return reactQuery.useQuery<GetListingsResponse, GetListingsError, TData>({
        queryKey: queryKeyFn({
            path: '/api/listings/search',
            operationId: 'getListings',
            variables,
        }),
        queryFn: ({ signal }) => fetchGetListings({ ...fetcherOptions, ...variables }, signal),
        ...options,
        ...queryOptions,
    });
};

export type CreateListingError = Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
}>;

export type CreateListingVariables = {
    body: Schemas.CreateListingSchema;
} & ShopkeeperContext['fetcherOptions'];

/**
 * Create a new listing.
 */
export const fetchCreateListing = (variables: CreateListingVariables, signal?: AbortSignal) =>
    shopkeeperFetch<Schemas.ListingSchema, CreateListingError, Schemas.CreateListingSchema, {}, {}, {}>({
        url: '/api/listings/',
        method: 'post',
        ...variables,
        signal,
    });

/**
 * Create a new listing.
 */
export const useCreateListing = (
    options?: Omit<
        reactQuery.UseMutationOptions<Schemas.ListingSchema, CreateListingError, CreateListingVariables>,
        'mutationFn'
    >,
) => {
    const { fetcherOptions } = useShopkeeperContext();
    return reactQuery.useMutation<Schemas.ListingSchema, CreateListingError, CreateListingVariables>({
        mutationFn: (variables: CreateListingVariables) => fetchCreateListing({ ...fetcherOptions, ...variables }),
        ...options,
    });
};

export type EditListingPathParams = {
    listingId: number;
};

export type EditListingError = Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
}>;

export type EditListingVariables = {
    body: Schemas.EditListingSchema;
    pathParams: EditListingPathParams;
} & ShopkeeperContext['fetcherOptions'];

/**
 * Edit an existing listing.
 */
export const fetchEditListing = (variables: EditListingVariables, signal?: AbortSignal) =>
    shopkeeperFetch<Schemas.ListingSchema, EditListingError, Schemas.EditListingSchema, {}, {}, EditListingPathParams>({
        url: '/api/listings/{listingId}',
        method: 'patch',
        ...variables,
        signal,
    });

/**
 * Edit an existing listing.
 */
export const useEditListing = (
    options?: Omit<
        reactQuery.UseMutationOptions<Schemas.ListingSchema, EditListingError, EditListingVariables>,
        'mutationFn'
    >,
) => {
    const { fetcherOptions } = useShopkeeperContext();
    return reactQuery.useMutation<Schemas.ListingSchema, EditListingError, EditListingVariables>({
        mutationFn: (variables: EditListingVariables) => fetchEditListing({ ...fetcherOptions, ...variables }),
        ...options,
    });
};

export type GetCurrentUserError = Fetcher.ErrorWrapper<undefined>;

export type GetCurrentUserVariables = ShopkeeperContext['fetcherOptions'];

/**
 * Retrieve the details of the current user.
 */
export const fetchGetCurrentUser = (variables: GetCurrentUserVariables, signal?: AbortSignal) =>
    shopkeeperFetch<Schemas.DiscordUser | null, GetCurrentUserError, undefined, {}, {}, {}>({
        url: '/auth/me',
        method: 'get',
        ...variables,
        signal,
    });

/**
 * Retrieve the details of the current user.
 */
export const useGetCurrentUser = <TData = Schemas.DiscordUser | null>(
    variables: GetCurrentUserVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<Schemas.DiscordUser | null, GetCurrentUserError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { fetcherOptions, queryOptions, queryKeyFn } = useShopkeeperContext(options);
    return reactQuery.useQuery<Schemas.DiscordUser | null, GetCurrentUserError, TData>({
        queryKey: queryKeyFn({
            path: '/auth/me',
            operationId: 'getCurrentUser',
            variables,
        }),
        queryFn: ({ signal }) => fetchGetCurrentUser({ ...fetcherOptions, ...variables }, signal),
        ...options,
        ...queryOptions,
    });
};

export type QueryOperation =
    | {
          path: '/api/listings/search';
          operationId: 'getListings';
          variables: GetListingsVariables;
      }
    | {
          path: '/auth/me';
          operationId: 'getCurrentUser';
          variables: GetCurrentUserVariables;
      };
